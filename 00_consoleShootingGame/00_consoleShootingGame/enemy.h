#pragma once

#define ENEMY_PATTERN_COUNT			15	// 적 경로 좌표 개수

// 적 이동경로 좌표
struct MovePattern
{
	int iX;
	int iY;
};

// 적 정보
struct EnemyInfo
{
	// 적 이름(화면에 어떻게 보일지)
	char enemyAlphabat;
	// 적 전체 HP
	int hp;
	// 이동속도
	// 값이 25이면 25프레임마다 이동함
	int moveSpeed;
	// 공격속도
	int attackSpeed;
	// 총알속도
	int bulletSpeed;
	// 전체 패턴의 길이
	int patternLength;
	// 적 이동경로 좌표
	MovePattern movePattern[ENEMY_PATTERN_COUNT];
};

// 적
struct Enemy
{
	// 좌표 x, y
	int iX;
	int iY;
	// 적 현재 hp
	int currentHp;
	// 현재 패턴의 인덱스
	int currentPoint;
	// 적 정보
	EnemyInfo* enemyInfo;
};

//////////////////////////////////////////////////////////////
// load movePatternInfo.txt
// 
//////////////////////////////////////////////////////////////
void loadEnemyPatternInfo();

//////////////////////////////////////////////////////////////
// load enemyInfo.txt
// enemyInfo 초기화
// 
//////////////////////////////////////////////////////////////
void loadEnemyInfo();

//////////////////////////////////////////////////////////////
// load stage.txt
// loadStageInfo 에서 호출됨
// 
//////////////////////////////////////////////////////////////
void createEnemy(const char* fileName);

//////////////////////////////////////////////////////////////
// enemy 상태변경
// 
//////////////////////////////////////////////////////////////
void updateEnemy();

//-------------------------------------------------------------
// enemy 사망체크
//
//-------------------------------------------------------------
bool isEnemyAllDead();

//////////////////////////////////////////////////////////////
// enemy 랜더링을 위해 buffer로 전달
// 
//////////////////////////////////////////////////////////////
void renderEnemy();

//////////////////////////////////////////////////////////////
// enemy 동적할당 해제
// 
//////////////////////////////////////////////////////////////
void freeEnemy();
